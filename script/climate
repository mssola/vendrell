#!/usr/bin/perl -w
# Copyright (C) 2014 Miquel Sabaté Solà
# This file is licensed under the MIT license.
# See the LICENSE file.

# This script allows to perform a check of the state of our code. That is,
# it checks that the test suite covers as much as possible of the code, and
# it also checks that the syntax is following the required gofmt options.
# The rules passed to the gofmt command are as follows:
#       -tabs=false -tabwidth=4 -l=true -e=true -d=true

use strict;
use File::Basename;
use Cwd 'abs_path';


# Show the usage message.
sub usage {
    print "Usage: climate [-a] [-o] [-h | --help] package-name\n";
    print "  -a  Continue even if the cover test is below our threshold.\n";
    print "  -o  Don't open a new tab with the coverage results.\n";
    print "  -h  Show this message.\n";
}

# Initialization.
my $base = abs_path(dirname(dirname($0)));
my $pkg = $ARGV[-1];
my $threshold = 90.0;
my $all = 0;

# Parsing options.
if (@ARGV == 0) {
    usage();
    exit(1);
}

my %opts = ('a', 0, 'o', 1);
for (my $it = 0; $it < @ARGV; $it++) {
    if ($ARGV[$it] eq '-a') {
        $opts{'a'} = 1;
    } elsif ($ARGV[$it] eq '-o') {
        $opts{'o'} = 0;
    } elsif ($ARGV[$it] eq '-h' || $ARGV[$it] eq '--help') {
        usage();
        exit(0);
    } else {
        if ($it == @ARGV - 1) {
            last;
        }
        print "Unknown option `$ARGV[$it]'.\n";
        usage();
        exit(1);
    }
}

# Cover tool.
chdir("$base/$pkg") or die $!;
my $cover = `go test -coverprofile=c.out -covermode=count`;
if ($cover =~ /coverage:\s?(.+)%/) {
    my $fl = sprintf '%.1f', $1;
    if ($fl < $threshold) {
        print "Coverage required: $threshold%; got: $fl%\n";
        if (!$opts{'a'}) {
            `rm -f c.out`;
            exit(1);
        }
    } else {
        print "The tests are covering the $fl% of this package!\n";
    }
    if ($opts{'o'}) {
        `go tool cover -html=c.out`;
    }
    `rm -f c.out`;
} else {
    print "No tests found in package '$pkg'.";
}

# Fmt tool
print `gofmt -l=true -e=true -d=true .`;
